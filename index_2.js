// –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ DOM-–¥–µ—Ä–µ–≤–∞
document.addEventListener("DOMContentLoaded", () => {
  console.log("DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω");

  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
  function observeChanges(targetNode) {
    if (!targetNode) {
      console.warn("–£–∫–∞–∑–∞–Ω–Ω—ã–π —É–∑–µ–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    const observer = new MutationObserver((mutationsList) => {
      mutationsList.forEach((mutation) => {
        if (mutation.type === "childList") {
          // üéØ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          function getQueryParam(param) {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
          }

          const tableName = getQueryParam("TableName");
          const decodedTableName = decodeURIComponent(`R${tableName}`);
          console.log("decodedTableName", decodedTableName);
          const tableElement_f = document.getElementById(decodedTableName);
          console.log("tableElement_f", tableElement_f);

          if (tableElement_f) {
            const yello = tableElement_f.children;
            console.log("–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:", yello[2]);
            const hiddenElements = [
              ...yello[2].querySelectorAll("div.hide"),
            ].filter((el) => el.classList.length === 1);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ DOM-–¥–µ—Ä–µ–≤–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if (!newTree) {
              newTree = document.createElement("div");
              newTree.id = "new_tree";
              newTree.style.position = "absolute";
              newTree.style.top = "10px";
              newTree.style.left = "10px";
              newTree.style.padding = "10px";
              newTree.style.background = "rgba(255, 255, 255, 0.8)";
              newTree.style.zIndex = "1000";
              document.body.appendChild(newTree);
            } else {
              newTree.innerHTML = ""; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            }
            hiddenElements.forEach((_, index) => {
              const button = document.createElement("button");
              button.textContent = `–ù–∞–∂–∞—Ç—å ${index + 1}`;
              button.style.display = "block";
              button.style.margin = "5px";
              button.dataset.index = index;
              button.addEventListener("click", () =>
                clickElementByIndex(index)
              );
              newTree.appendChild(button);
            });
            // hiddenElements.forEach((_, index) => {
            //   const button = document.createElement("button");
            //   button.textContent = `–ù–∞–∂–∞—Ç—å ${index + 1}`;
            //   button.style.display = "block";
            //   button.style.margin = "5px";
            //   button.dataset.index = index;
            //   button.addEventListener("click", () =>
            //     clickElementByIndex(index)
            //   );
            //   newTree.appendChild(button);
            // });

            // document.body.appendChild(newTree);

            console.log("–¢–æ–ª—å–∫–æ div.hide —ç–ª–µ–º–µ–Ω—Ç—ã:", hiddenElements);
          } else {
            console.warn("–≠–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          }
        }
      });
    });

    observer.observe(targetNode, { childList: true, subtree: true });
    console.log(`–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º:`, targetNode);
  }

  // üîπ –í—ã–±–∏—Ä–∞–µ–º, –∑–∞ —á–µ–º —Å–ª–µ–¥–∏—Ç—å
  const targetElement = document.body; // –ò–ª–∏ document.getElementById("–º–æ–π_—ç–ª–µ–º–µ–Ω—Ç")
  observeChanges(targetElement);
});
